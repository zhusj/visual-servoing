#!/usr/bin/env python
"""
Performs eye in hand (eih) pose based visual servoing (pbvs). 
Written by Alex Zhu (alexzhu(at)seas.upenn.edu)
"""
import roslib
import numpy as np
import numpy.matlib
import sys
import rospy
import cv2
from tf.transformations import *
import tf
# from apriltag_client import AprilTagClient
from baxter_wrapper import BaxterVS
from visual_servoing import VisualServoing
# from apriltags_ros.msg import AprilTagDetectionArray

from utility import *

from std_msgs.msg import (
    Header,
    UInt16,
)

from sensor_msgs.msg import Image
from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
)

import baxter_interface
import baxter
from moveit_commander import conversions

class PbvsEih(object):
    """
    Performs eye in hand (eih) image based visual servoing (ibvs). 
    """
    def __init__(self):
        # Sets the arm that is used for the servoing
        limb='left'
        self._baxter = BaxterVS(limb)

        self.gripper = baxter_interface.Gripper(limb)
        self.gripper.calibrate()

        # Initializes the marker that the arm should track
        target_marker = 0
        # self._apriltag_client = AprilTagClient(target_marker)

        self._visual_servo = VisualServoing(False)    
        # cv2.namedWindow("Detected tags",0)

        self.marker_t=None
        self.marker_R=None

        self.target_obj_name = "expo_dry_erase_board_eraser"

        simtrack_topic = "/simtrack/" + self.target_obj_name
        print 'simtrack_topic: ', simtrack_topic
        self.subscribe_to_simtrack(simtrack_topic)
  

    def get_pose(self, data):
        # print 'cam_pose: ', data.pose
        (self.marker_t, self.marker_R) = get_t_R(data.pose)

    def subscribe_to_simtrack(self, simtrack_topic):
        print '\n subscribing'
        sub = rospy.Subscriber(simtrack_topic, PoseStamped, self.get_pose)
        print '\n end subscribing'

    def _main_iter(self):
        """
        Runs one instance of the visual servoing control law. Call in a loop.
        """
        # key = -2
        # image = self._apriltag_client.image
        # if image is None:
        #     print 'no image'
        #     return
        # Draw the ideal position if selected
        # if self._visual_servo._target_set:
        #     print 'target set'
        #     corners = self._visual_servo._ideal_corners
        #     for i in range(0,4):
        #         # Camera intrinsics currently hard coded, tune as needed, 
        #         # or add a subscriber to the camera_info message.
        #         cv2.circle(image,(int(corners[i*2]*407.19+317.22),int(corners[i*2+1]*407.195786+206.752)),5,(255,0,0),5)
        # cv2.imshow("Detected tags",image)
        # key = cv2.waitKey(5)
        
        # pose: 
        #   position: 
        #     x: 0.0703210349954
        #     y: 0.0207515639124
        #     z: 0.100353679031
        #   orientation: 
        #     x: 0.0305494043199
        #     y: 0.996535070586
        #     z: 0.0757659684332
        #     w: 0.0156238604684

          # position: 
          #   x: 0.125581991683
          #   y: 0.056925803143
          #   z: 0.167849532136
          # orientation: 
          #   x: 0.00578534021301
          #   y: 0.999924139472
          #   z: 0.00808789160022
          #   w: 0.00726850397684


        # pose: 
        #   position: 
        #     x: 0.0798907744327
        #     y: 0.0393022484119
        #     z: 0.107615683339
        #   orientation: 
        #     x: 0.0300291017366
        #     y: 0.999237092819
        #     z: 0.0247878443813
        #     w: 0.00300801503595
        error_norm = 1
        dist_tol = 0.001
        while error_norm > dist_tol:
            DesiredPose = Pose()
            DesiredPose.position.x = .125581991683
            DesiredPose.position.y = .056925803143
            DesiredPose.position.z = .167849532136
            DesiredPose.orientation.x = 0.00578534021301
            DesiredPose.orientation.y = 0.999924139472
            DesiredPose.orientation.z = 0.00808789160022
            DesiredPose.orientation.w = 0.00726850397684

            # Return if no tag detected
            marker_pose = self.marker_t
            marker_rot = self.marker_R
            # marker_corners = self._apriltag_client.corners
            print 'marker_pose: ', marker_pose
            print 'marker_rot: ', marker_rot
            if marker_pose is None:
                return

            # Don't reprocess detections
            # if self._visual_servo._target_set:
            #     self._apriltag_client.marker_t = None
            #     self._apriltag_client.marker_R = None
            #     self._apriltag_client.corners = None
            
                # Press any key to set a new target position for the servo control law.
            # print 'key: ', key
            if not self._visual_servo._target_set: #key !=-1:
                rospy.loginfo("Setting new target")
                print 'desired_pose: ', marker_pose
                # desired_corners = marker_corners
                # desired_pose = marker_pose
                # desired_rot = marker_rot
                (desired_pose, desired_rot) = get_t_R(DesiredPose)
                self._visual_servo.set_target(desired_pose,desired_rot)
                # self._visual_servo.set_target(desired_pose,desired_rot,desired_corners)

            if not self._visual_servo._target_set:
                return

            # Get control law velocity and transform to body frame, then send to baxter
            servo_vel, error = self._visual_servo.get_next_vel(marker_pose,marker_rot)
            error_norm = np.linalg.norm(error)/6
            print 'error_norm: ', error_norm
            # print 'servo_vel: ', servo_vel
            baxter_vel = self._baxter.cam_to_body(servo_vel)
            # print 'baxter_vel: ', baxter_vel
            self._baxter.set_hand_vel(baxter_vel, error_norm)
            rospy.sleep(0.9)

        # hand_pose = baxter.get_arm_pose('left')
        # print 'hand_pose:', hand_pose

        # self.golf_ball_x = hand_pose.position.x                      # x     = front back
        # self.golf_ball_y = hand_pose.position.y                       # y     = left right
        # self.golf_ball_z = hand_pose.position.z -0.04                       # z     = up down
        # self.orientation = hand_pose.orientation

        # self.pose = (self.golf_ball_x,
        #                 self.golf_ball_y,
        #                 self.golf_ball_z,
        #                 self.orientation.x,
        #                 self.orientation.y,
        #                 self.orientation.z,
        #                 self.orientation.w)

        # print 'ready to move'
        # self.baxter_ik_move('left', self.pose)

        # time.sleep(1)

        # self.gripper.close()
        # time.sleep(1)

        # hand_pose = baxter.get_arm_pose('left')
        # self.golf_ball_x = hand_pose.position.x                       # x     = front back
        # self.golf_ball_y = hand_pose.position.y                       # y     = left right
        # self.golf_ball_z = hand_pose.position.z+0.03                       # z     = up down
        # self.orientation = hand_pose.orientation

        # self.pose = (self.golf_ball_x,
        #                 self.golf_ball_y,
        #                 self.golf_ball_z,
        #                 self.orientation.x,
        #                 self.orientation.y,
        #                 self.orientation.z,
        #                 self.orientation.w)

        # print 'ready to move'
        # self.baxter_ik_move('left', self.pose)

    def baxter_ik_move(self, limb, rpy_pose):
        quaternion_pose = conversions.list_to_pose_stamped(rpy_pose, "base")

        node = "ExternalTools/" + limb + "/PositionKinematicsNode/IKService"
        ik_service = rospy.ServiceProxy(node, SolvePositionIK)
        ik_request = SolvePositionIKRequest()
        hdr = Header(stamp=rospy.Time.now(), frame_id="base")

        ik_request.pose_stamp.append(quaternion_pose)
        try:
            rospy.wait_for_service(node, 5.0)
            ik_response = ik_service(ik_request)
        except (rospy.ServiceException, rospy.ROSException), error_message:
            rospy.logerr("Service request failed: %r" % (error_message,))
            sys.exit("ERROR - baxter_ik_move - Failed to append pose")

        if ik_response.isValid[0]:
            print("PASS: Valid joint configuration found")
            # convert response to joint position control dictionary
            limb_joints = dict(zip(ik_response.joints[0].name, ik_response.joints[0].position))
            # move limb
            # if self.limb == limb:
            limb_interface = baxter_interface.Limb(limb)
            limb_interface.move_to_joint_positions(limb_joints)
            print 'moving'
            # else:
                # self.other_limb_interface.move_to_joint_positions(limb_joints)
        else:
            # display invalid move message on head display
            # self.splash_screen("Invalid", "move")
            # little point in continuing so exit with error message
            print "requested move =", rpy_pose
            sys.exit("ERROR - baxter_ik_move - No valid joint configuration found")

        # if self.limb == limb:               # if working arm
        quaternion_pose = limb_interface.endpoint_pose()
        position        = quaternion_pose['position']

        # if working arm remember actual (x,y) position achieved
        self.pose = [position[0], position[1],                                \
                     self.pose[2], self.pose[3], self.pose[4], self.pose[5]]

def main(args):
    rospy.init_node('pbvs_eih')
    pbvseih = PbvsEih()
    r = rospy.Rate(60)
    while not rospy.is_shutdown():
        pbvseih._main_iter()
        r.sleep()

    rospy.spin()

if __name__ == "__main__":
    try:
        main(sys.argv)
    except rospy.ROSInterruptException: pass
